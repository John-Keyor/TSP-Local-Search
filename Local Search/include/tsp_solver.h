#pragma once

#include <vector>

struct Cell {
	int x;
	int y;
	double reward;

    // Need to override the bool operator to make one cell comparable to another
    // But because this is for permutations, the comparison value of a cell doesn't matter
    // The comparison defined below ensures the same initial order as the Python version
    bool operator<(const Cell& rhs) const {
        //return (this->x + this->y + this->reward) < (rhs.x + rhs.y + rhs.reward);
        if (this->reward != rhs.reward) {
            return this->reward > rhs.reward; //descending order. for ascending order, use '<'
        } else {
            return (10*this->x + this->y) < (10*rhs.x + rhs.y);
        }
    }

    // In C++, structs do not have a comparison operator generated by default.
    // You need to write your own:
    bool operator==(const Cell& rhs) const {
        return (this->x == rhs.x) && (this->y == rhs.y) && (this->reward == rhs.reward);
    }

};

class TSPSolver {
	public:
		TSPSolver();
	private:
		// Input: search_cells - set of cells to be searched
		// Output: total_reward - reward acquired from searched_cells
		double get_total_reward(std::vector<Cell> search_cells);
		// Input: cell1, cell2 - cells
		// Output: distance - euclidean distance between cells
		double get_dist(Cell cell1, Cell cell2);
		// Input: ordered_search_cells - set of cells to be searched in order
		// Output: total_distance - distance traversed to visit all cells
		double get_total_dist(std::vector<Cell> ordered_search_cells);
		// Input: ordered_search_cells - set of cells to be searched in order
		// Output: time - time expended to visit all cells
		double get_total_time(std::vector<Cell> ordered_search_cells);
	public:
       
        // Print to output methods
        void print_cell (Cell cell1);
        void print_all_cells (std::vector<Cell> cells);
        void print_total_reward (std::vector<Cell> cells);
        void print_total_dist (std::vector<Cell> cells);
        void print_total_time (std::vector<Cell> cells);
        void print_all_stats (std::vector<Cell> cells);

        //getter methods
        double totalTimeGetter(std::vector<Cell> cells);
        double totalDistanceGetter(std::vector<Cell> cells);
        double totalRewardGetter(std::vector<Cell> cells);

        //tsp_solution_methods
        void modified_brute_force (std::vector<Cell> cells, int max_perm, int time_period);
        void nearest_neighbour (std::vector<Cell> cells, int time_period);

        //preliminary set up methods
        std::vector<Cell> create_uniform_reward_cells (int x_dimension, int y_dimension);
        std::vector<Cell> create_randomized_reward_cells (int x_dimension, int y_dimension);


	private:
		// time (in seconds) to search a cell
		const double CELL_SEARCH_TIME;
		// time (in seconds) to travel 1 unit
		const double TRAVEL_SPEED;


};
